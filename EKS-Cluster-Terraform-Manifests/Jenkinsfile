pipeline 
{
    agent any
    environment {
        TF_VAR_aws_region="${aws_region}"
        TF_VAR_aws_access_key = credentials('aws_access_key')
        TF_VAR_aws_secret_key = credentials('aws_secret_key')
        TF_VAR_project="${project}"
        TF_VAR_env="${env}"
        TF_VAR_aws_key_pair="${aws_key_pair}"
        // TF_VAR_vpc_name="${vpc_name}"
        TF_VAR_vpc_cidr_block="${vpc_cidr_block}"
        TF_VAR_vpc_availability_zones="${vpc_availability_zones}"
        TF_VAR_vpc_public_subnets="${vpc_public_subnets}"
        TF_VAR_vpc_private_subnets="${vpc_private_subnets}"
    }

     parameters {
        string(name: 'aws_region', defaultValue: 'us-east-1', description: 'AWS region where all the resources will be created')
        string(name: 'project', defaultValue: 'test', description: 'Name of terraform project')
        string(name: 'env', defaultValue: 'dev', description: 'Project env')
        // string(name: 'vpc_name', defaultValue: 'dev-vpc', description: '')
        string(name: 'vpc_cidr_block', defaultValue: '10.0.0.0/16', description: 'VPC CIDR block')
        string(name: 'vpc_availability_zones', defaultValue: 'us-east-1a,us-east-1b', description: 'Comma-separated list of availability zones')
        string(name: 'vpc_public_subnets', defaultValue: '10.0.101.0/24,10.0.102.0/24', description: 'Comma-separated list of public subnets CIDR blocks')
        string(name: 'vpc_private_subnets', defaultValue: '10.0.1.0/24,10.0.2.0/24', description: 'Comma-separated list of private subnets CIDR blocks')
        string(name: 'aws_key_pair', defaultValue: 'eks-terraform-key', description: 'AWS Key pair')
        choice(name: 'action', description: '', choices: ['plan','apply' , 'destroy'])
    }
    stages {
        stage("Terraform Setup/init"){
            steps {
                sh '''
                cd EKS-Cluster-Terraform-Manifests/
                terraform init -reconfigure -backend-config="access_key=$TF_VAR_aws_access_key" -backend-config="secret_key=$TF_VAR_aws_secret_key"
                '''
            }
        }
        stage("Terraform dry-run"){
            steps{                  
                sh '''
                cd EKS-Cluster-Terraform-Manifests/
                echo "Project Name --> "$TF_VAR_project
                terraform plan -var="aws_access_key=$TF_VAR_aws_access_key" -var="aws_secret_key=$TF_VAR_aws_secret_key"
                 '''
            }
        }
        stage("Terraform Action"){
            steps{
                sh '''
                cd EKS-Cluster-Terraform-Manifests/
                if [ $action = "plan" ]; then
                    terraform plan -var="aws_access_key=$TF_VAR_aws_access_key" -var="aws_secret_key=$TF_VAR_aws_secret_key"
                else
                    terraform ${action} --auto-approve -var="aws_access_key=$TF_VAR_aws_access_key" -var="aws_secret_key=$TF_VAR_aws_secret_key"
                fi
                '''
            }
        }

    }
}
